name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "staging", "feature/*" ]
  pull_request:
    branches: [ "main", "staging" ]
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  pull-requests: write
  issues: write
  deployments: write

jobs:
  # Security Analysis job
  # Skipped when merging from feature branch to staging or from staging to main
  # since code has already been analyzed in the feature branch
  analyze:
    name: Security Analysis
    runs-on: ubuntu-latest
    # Skip analysis when merging from staging to main or from feature to staging
    if: |
      !(github.ref == 'refs/heads/main' && 
        github.event_name == 'pull_request' && 
        github.head_ref == 'staging') &&
      !(github.ref == 'refs/heads/staging' && 
        github.event_name == 'pull_request' && 
        startsWith(github.head_ref, 'feature/'))
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-extended,security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  # Verification job that runs linting and tests
  # This job is skipped when merging from a feature branch to staging
  # or when merging from staging to main since code has already been verified
  verify:
    needs: analyze
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      !(github.ref == 'refs/heads/staging' && 
        github.event_name == 'pull_request' && 
        startsWith(github.head_ref, 'feature/')) &&
      !(github.ref == 'refs/heads/main' && 
        github.event_name == 'pull_request' && 
        github.head_ref == 'staging')

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci --legacy-peer-deps

    - name: Run ESLint
      run: npm run lint || true

  # Staging deployment job
  # Depends on both analyze and verify, but both may be skipped
  # when merging from feature branch to staging
  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: [analyze, verify]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Vercel (Preview)
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        github-comment: true
        working-directory: ./
        vercel-args: '--force --confirm'

    - name: Comment Preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.issue;
          if (issue.number) {
            github.rest.issues.createComment({
              issue_number: issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîç Preview deployment completed!\nURL: ${process.env.DEPLOY_URL}\nBranch: staging`
            });
          }
      env:
        DEPLOY_URL: ${{ steps.deploy.outputs.url }}

  # Production deployment job
  # Depends on both analyze and verify, but both may be skipped
  # when merging from staging to main
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [analyze, verify]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    timeout-minutes: 10
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Deploy to Vercel (Production)
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--prod --confirm'
        working-directory: ./

    - name: Update Release with Deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: process.env.RELEASE_ID,
            body: `üöÄ Production deployment completed!\nURL: ${process.env.DEPLOY_URL}\nCommit: ${context.sha}\n\n${process.env.RELEASE_BODY}`
          });
      env:
        DEPLOY_URL: ${{ steps.deploy.outputs.url }}
        RELEASE_ID: ${{ steps.create_release.outputs.id }}
        RELEASE_BODY: ${{ steps.create_release.outputs.body }}
